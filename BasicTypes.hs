-- Module 1. Intro
-- 1.4 Basic Types


-- 1) Вывод типа выражения
{-
    типизированный язык по строгой статической системой типов:
        - строгий === отсутствуют неявные приведения типов
        - проверка типов во время компиляции
    
    Если выражение построено правильно, то его тип выводится автоматически

    :type
    :t

    :type 'c'
    'c' :: Char
-}


-- 2) Числовые типы и числовые литералы

{-
    int - целочисленные
    integer - целые произвольного размера
    float, double - цифры с плавающей точкой одинарной и двойной точности

    Все эти типы представители класса Num, задает общий интерфейс

    Числовые литералы:
    ghci> :t 3
    3 :: Num a => a
    ghci> let x = 3 :: Int
    ghci> :t x
    x :: Int
    ghci> let y = 3 :: Double
    ghci> y
    3.0
    ghci> :t y
    y :: Double
    ghci> :t 3.5
    3.5 :: Fractional a => a

    Символьный литерал - 'c'
-}


-- 3) Тип функции
{-
    Для того, чтобы описать тип функции, нужно задать тип ее аргумента и 
    тип результата этой функции.
    ДЛя описания типа функции служит оператор ->, это бинарный оператор.
    Левый операнд - тип аргумента, первый - тип результата.

    Функция с 1 аргументом:
    ghci> not False
    True
    ghci> :t not
    not :: Bool -> Bool
    ghci> 

    Функция с 2 аргументами:

-}

-- 4) Импорт модулей и справочная система
-- 5) Тип кортежа
-- 6) Тип списка
-- 7) Базовые операции над списками
import Data.Char
import qualified GHC.TypeLits as функции
twoDigits2Int:: Char -> Char -> Int
twoDigits2Int x y = 
    if isDigit x && isDigit y 
        then digitToInt x * 10 + digitToInt y 
        else 100
